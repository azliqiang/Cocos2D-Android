01. Why Do We Need Time Scheduling    01. 在我们进行游戏开发的时候，往往有一些工作是需要定时来完成的；    02. 比如，飞行射击类的游戏，就像雷电这类飞行射击的游戏；    03. 大部分的飞行射击游戏，手机版和 PC 版的方法是不一样的；    04. 因为在手机上我们不可能设计特别复杂的按键，在 PC 上是按下按钮发射子弹，而手机上往往是一直发射子弹；    05. 这就存在着子弹的间隔时间的问题，我们可以定义每隔一秒钟我们的飞机就发射一颗子弹；    06. 这就是所谓的时间调度，每隔一段时间要完成一件工作，在游戏开发中非常常用；    07. 发射子弹也好，碰撞检测也好，等等，在 Cocos2d 平台下实现时间调度，要使用 schedule() 方法。02. Use schedult () Method    2.01  Source Code          public class GameLayer extends CCLayer {              public GameLayer() {                  // 调用 schedule() 方法，传输函数名，以及间隔时间          (1)     this.schedule("myFunc", 3);              }              public void myFunc(float delta) {          (2)     System.out.println("调用 myFunc() 函数");              }          }    2.02  Demonstrate03. The Role of delta Parameters    3.01  Source Code          public class GameLayer extends CCLayer {              public GameLayer() {                  // 调用 schedule() 方法，传输函数名，以及间隔时间                  this.schedule("myFunc", 3);              }              /*               * delta 往往用来表示增量；               * 在当前的例子中，该变量的值为上次调用 myFunc() 函数               * 与这次调用 myFunc 函数之间的时间差。               */                            public void myFunc(float delta) {         (1)      System.out.println("调用 myFunc() 函数，delta 的值为：" + delta);              }          }    3.02  Demonstrate04. Use unschedult() Method    4.01  Source Code          public class GameLayer extends CCLayer {              public GameLayer() {                  this.setIsTouchEnabled(true);                  // 调用 schedule() 方法，传输函数名，以及间隔时间                  this.schedule("myFunc", 3);              }              /*               * delta 往往用来表示增量；               * 在当前的例子中，该变量的值为上次调用 myFunc() 函数               * 与这次调用 myFunc 函数之间的时间差。               */                            public void myFunc(float delta) {                  System.out.println("调用 myFunc() 函数，delta 的值为：" + delta);              }              /*               * 点击菜单栏：  Source --> Override/Implement Methods...               * 选择回调函数：ccTouchesBegan(MotionEvent)               */              // 当用户开始触摸屏幕时，执行该方法              @Override              public boolean ccTouchesBegan(MotionEvent event) {          (1)     this.unschedule("myFunc");                  return super.ccTouchesBegan(event);              }          }    4.02  Demonstrate05. Summary Up