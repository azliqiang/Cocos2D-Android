01. 什么是向量    01. 这个概念在游戏开发中向量是必不可少的，计算距离、方向等很多地方都会遇到；    02. 向量就是带方向的量；    03. 为什么在 Cocos2d 当中，CGPoint 可以代表点，又可以代表个向量。02. 使用 CGPoint 对象代表向量03. 基于向量的运算    3.01  向量的加减法          01. 两个向量相加也就是两个 CGPoint 相加；          02. X 轴坐标加 X 轴坐标，Y 轴加 Y 轴坐标；          03. 减法一样的道理。    3.02  向量的乘除法          01. 向量的乘法，不是两个向量相乘；          02. 而是一个向量乘以或除以一个数；          03. 一个向量的 X 轴乘以除以一个数，然后再 Y 轴，最后得到一个数。    3.03  计算单位向量          单位向量是，一个向量长度是 200，那么单位向量就除以 200。    3.04  创建工程          01. File --> New --> Android Application Project；          02. --> Application Name: SG_03_Vector，Package Name: org.openeducation.sg_03_vector；          03. --> Next --> Next --> Next --> Blank Activity (Create Activity)；          04. --> Next --> Activity Name: MainActivity --> Finish    3.05  Source Code - Same Position          主要是通过向量的加、减、乘、除来了解加、减、乘、除的用法；          public class GameLayer extends CCLayer {	          (1)  CCSprite aSprite;          (2)  CCSprite bSprite;	              public GameLayer () {          (3)    aSprite = CCSprite.sprite("Usopp.png");          (4)    bSprite = CCSprite.sprite("Usopp.png");          (5)    this.addChild(aSprite);          (6)    this.addChild(bSprite);		          (7)    CGPoint initPoint = CGPoint.ccp(400, 400);          (8)    aSprite.setPosition(initPoint);          (9)    bSprite.setPosition(initPoint);              }          }    3.06  Source Code - Up，Sub etc.          public class GameLayer extends CCLayer {	              CCSprite aSprite;              CCSprite bSprite;	              public GameLayer () {                  aSprite = CCSprite.sprite("Usopp.png");                  bSprite = CCSprite.sprite("Usopp.png");                  this.addChild(aSprite);                  this.addChild(bSprite);		                  CGPoint initPoint = CGPoint.ccp(400, 400);                  aSprite.setPosition(initPoint);                  bSprite.setPosition(initPoint);                  /*          (1)     CGPoint deltaPoint = CGPoint.ccp(0, 200);                  // 1. 向量的加法          (2)     CGPoint targetPoint = CGPoint.ccpAdd(initPoint, deltaPoint);                  // 2. 向量的减法，先不演示          (3)     CGPoint subPoint = CGPoint.ccpSub(initPoint, deltaPoint);                  // 3. 向量的乘法          (4)     CGPoint mulPoint = CGPoint.ccpMult(initPoint, 2);                  // 4. 计算单位向量          (5)     CGPoint norPoint = CGPoint.ccpNormalize(initPoint);          (6)     bSprite.setPosition(targetPoint);                  */              }          }          向量的乘法很复杂，包括点乘和差乘，我们这里很简单就乘以一个数；          我们这里没有向量的除法；04. CCMoveBy 与 CCJumpBy    4.01  Introduction          01. MoveBy 的意思是指在精灵当前位置的基础上，它移动真正的位置是把现在的向量加上移动的向量；          02. MoveTo 移动的是绝对值，而 MoveBy 移动的是增量，增量就是增加的向量加上当前的位置；          03. 这里我们也看到 CGPoint 作为一个点和一个向量的区别还是很大的。    4.02  Source Code - MoveBy          public class GameLayer extends CCLayer {	              CCSprite aSprite;              CCSprite bSprite;	              public GameLayer () {                  aSprite = CCSprite.sprite("Usopp.png");                  bSprite = CCSprite.sprite("Usopp.png");                  this.addChild(aSprite);                  this.addChild(bSprite);		                  CGPoint initPoint = CGPoint.ccp(400, 400);                  aSprite.setPosition(initPoint);                  bSprite.setPosition(initPoint);          (1)     CGPoint targetPoint = CGPoint.ccp(100, 100);          (2)     CCMoveBy moveBy = CCMoveBy.action(3, targetPoint);          (3)     aSprite.runAction(moveBy);                  /*                  CGPoint deltaPoint = CGPoint.ccp(0, 200);                  // 1. 向量的加法                  CGPoint targetPoint = CGPoint.ccpAdd(initPoint, deltaPoint);                  // 2. 向量的减法，先不演示                  CGPoint subPoint = CGPoint.ccpSub(initPoint, deltaPoint);                  // 3. 向量的乘法                  CGPoint mulPoint = CGPoint.ccpMult(initPoint, 2);                  // 4. 计算单位向量                  CGPoint norPoint = CGPoint.ccpNormalize(initPoint);                  bSprite.setPosition(targetPoint);                  */              }          }    4.03  Source Code - JumpBy          public class GameLayer extends CCLayer {	              CCSprite aSprite;              CCSprite bSprite;	              public GameLayer () {                  aSprite = CCSprite.sprite("Usopp.png");                  bSprite = CCSprite.sprite("Usopp.png");                  this.addChild(aSprite);                  this.addChild(bSprite);		                  CGPoint initPoint = CGPoint.ccp(400, 400);                  aSprite.setPosition(initPoint);                  bSprite.setPosition(initPoint);          (1)     CGPoint targetPoint = CGPoint.ccp(300, 100);          (2)     //CCJumpBy jumpBy = CCJumpBy.action(3, targetPoint, 300, 1);          (4)     CCJumpBy jumpBy = CCJumpBy.action(3, targetPoint, 200, 3);          (3)     aSprite.runAction(jumpBy);                  /*                  CGPoint targetPoint = CGPoint.ccp(100, 100);                  CCMoveBy moveBy = CCMoveBy.action(3, targetPoint);                  aSprite.runAction(moveBy);                  CGPoint deltaPoint = CGPoint.ccp(0, 200);                  // 1. 向量的加法                  CGPoint targetPoint = CGPoint.ccpAdd(initPoint, deltaPoint);                  // 2. 向量的减法，先不演示                  CGPoint subPoint = CGPoint.ccpSub(initPoint, deltaPoint);                  // 3. 向量的乘法                  CGPoint mulPoint = CGPoint.ccpMult(initPoint, 2);                  // 4. 计算单位向量                  CGPoint norPoint = CGPoint.ccpNormalize(initPoint);                  bSprite.setPosition(targetPoint);                  */              }          }    4.04  Summary Up          我们讲 MoveBy 和 JumpBy 是为了让大家知道 CGPoint 作为点和向量的时候是不一样的；05. 总结