01. Overview    1.01  Android Platform Touch Event Review          01. Android 平台本身就可以接收用户对触屏的处理；          02. Android 平台本身对触摸事件就已经很完善了，有单点触摸和多点触摸；          03. 在讲解 Cocos2d 的基础知识，我们先不考虑多点触摸，只考虑单点触摸；          04. 单点触摸就是，用户只有一个点触摸到了屏幕，在 Android 平台下我们可以得到一个 MotionEvent 对象；          05. 我们可以通过 MotionEvent 对象的 getx() 和 gety() 来得到坐标；          06. 可是这个原点坐标是从屏幕的左上角获取的，就如现在的屏幕左上角，X 轴是向右的，Y 轴是向下的；          07. 而 Cocos2d 差不多，区别在于 Cocos2d 原点是在右下角。    1.02  Set the Layer to Receive Touch Events          01. 一个游戏程序当中有多个场景 (Scene)，一个场景由多个图层 (Layer) 组成，这些个层是叠加在一起的；          02. 有的层需要接收触摸事件，有的层不需要接收，这点需要注意。02. New Projectand Prepare Cocos2d Environment    2.01  New Project          01. File --> New --> Android Application Project；          02. --> Application Name: SG_06_TouchEvent，Package Name: org.openeducation.sg_06_touchevent；          03. --> Next --> Next --> Next --> Blank Activity (Create Activity)；          04. --> Next --> Activity Name: MainActivity --> Finish    2.02  Copy Cocos2d Libraries          01. 拷贝 armeabi，x86，cocos2d-android，和 cocos2d-android.jardesc 到我们项目的 libs 下；          02. 然后，右键 cocos2d-android.jar --> Build Path --> Add to Build Path。    2.03  Prepare Environment          01. 拷贝上一节课中的必要代码到：MainActivity.java；          02. 新建布景层类：GameLayer.java，完成代码。03. Touch Event CallBack Debugging    3.01  Source Code          public class GameLayer extends CCLayer {              // 接收用户的触摸事件，首先必须对当前图层进行设置              public GameLayer() {                  // 设置当前图层是否接触摸事件          (1)     this.setIsTouchEnabled(true);              }              /*               * 点击菜单栏：  Source --> Override/Implement Methods...               * 选择回调函数：ccTouchesBegan(MotionEvent)               *               ccTouchesEnded(MotionEvent)               *               ccTouchesMoved(MotionEvent)               */              // 当用户开始触摸屏幕时，执行该方法              @Override              public boolean ccTouchesBegan(MotionEvent event) {          (2)     System.out.println("Began");                  return super.ccTouchesBegan(event);              }              // 当用户的手指离开屏幕时，执行该方法              @Override              public boolean ccTouchesEnded(MotionEvent event) {          (3)     System.out.println("Ended");                  return super.ccTouchesEnded(event);              }              // 当用户的手指在屏幕上移动时，执行该方法              @Override              public boolean ccTouchesMoved(MotionEvent event) {          (4)     System.out.println("Moved");                  return super.ccTouchesMoved(event);              }              /*               * 运行演示               *               * 单击鼠标：  每一点击都有两个事件，ccTouchesBegan，ccTouchesEnded               *             手指点击触发 ccTouchesBegan，手指离开触发 ccTouchesEnded               * 单击并拖动：点击时触发 ccTouchesBegan，移动时触发 ccTouchesMoved               *             最后，执行 ccTouchesEnded               */          }    3.02  Description          01. 现在，我们看到了触摸事件的产生，但是我们只知道点击了屏幕，而不知道到底点击了屏幕的哪里；          02. 下面，我们就使用回调函数使用的参数 event 来确定用户点击的坐标。04. Touch Point Coordinate Transformation    4.01  Description          01. Android 的坐标原点是从屏幕的左上角开始的，而 Cocos2d 的坐标原点是从屏幕的左下角开始的；          02. 所以，这时候 X 轴的坐标是没有问题的，都是一样的，而 Y 轴的坐标就不一样了；          03. 我们首先，要知道屏幕的长，也就是 Y 轴最高是多少；          04. 如果用户点击了，那么 MotionEvent 点击了的高度，应该是屏幕的高度减去 MotionEvent 到 Android 原点的高度；          05. 那我们就需要去求整个 Activity 的高度，CCDirector.sharedDirector().convertToGL()；          06. 这个方法能把 MotionEvent 得到的个坐标传进去，返回值就是得到的个坐标，就是我们上面说的减法。    4.02  Source Code          public class GameLayer extends CCLayer {              // 接收用户的触摸事件，首先必须对当前图层进行设置              public GameLayer() {                  // 设置当前图层是否接触摸事件                  this.setIsTouchEnabled(true);              }              /*               * 点击菜单栏：  Source --> Override/Implement Methods...               * 选择回调函数：ccTouchesBegan(MotionEvent)               *               ccTouchesEnded(MotionEvent)               *               ccTouchesMoved(MotionEvent)               */              // 当用户开始触摸屏幕时，执行该方法              @Override              public boolean ccTouchesBegan(MotionEvent event) {          (1)     float x = event.getX();          (2)     float y = event.getY();          (3)     CGPoint p1 = CGPoint.ccp(x, y);                  // converToGL() 方法可以将以左上角为原点的坐标，转换为左下角为原点的坐标          (4)     CGPoint p2 = CCDirector.sharedDirector().convertToGL(p1);          (5)     System.out.println("p1.x: " + p1.x + ", p1.y: " + p1.y);          (6)     System.out.println("p2.x: " + p2.x + ", p2.y: " + p2.y);                  /* Now, we need test the coordinate */                  System.out.println("Began");                  return super.ccTouchesBegan(event);              }              // 当用户的手指离开屏幕时，执行该方法              @Override              public boolean ccTouchesEnded(MotionEvent event) {                  System.out.println("Ended");                  return super.ccTouchesEnded(event);              }              // 当用户的手指在屏幕上移动时，执行该方法              @Override              public boolean ccTouchesMoved(MotionEvent event) {                  System.out.println("Moved");                  return super.ccTouchesMoved(event);              }              /*               * 运行演示               *               * 单击鼠标：  每一点击都有两个事件，ccTouchesBegan，ccTouchesEnded               *             手指点击触发 ccTouchesBegan，手指离开触发 ccTouchesEnded               * 单击并拖动：点击时触发 ccTouchesBegan，移动时触发 ccTouchesMoved               *             最后，执行 ccTouchesEnded               */          }05. Summary Up